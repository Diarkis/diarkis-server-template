// Code generated by Diarkis Puffer module: DO NOT EDIT
//
// Generated by Diarkis Version 1.0.0
//
// - Maximum length of a string is 65535 bytes
// - Maximum length of a byte array is 65535 bytes
// - Maximum length of any array is 65535 elements
using System;
using System.Text;
using System.Collections.Generic;
using Diarkis;

namespace Diarkis {

public class GetFieldInfo
{

	public static byte VER {
		get => 2;
	}
	public static ushort CMD {
		get => 4001;
	}

	public long FieldOfVisionSize = 0;
	public long FieldSize = 0;
	public int NodeCount = 0;

	public byte[] Pack()
	{
		byte[] bytes = new byte[0];

		/* long */
		byte[] fieldOfVisionSizeBytes = BitConverter.GetBytes((ulong)FieldOfVisionSize);
		Array.Reverse(fieldOfVisionSizeBytes);
		bytes = DiarkisPacket.Combine(bytes, fieldOfVisionSizeBytes);

		/* long */
		byte[] fieldSizeBytes = BitConverter.GetBytes((ulong)FieldSize);
		Array.Reverse(fieldSizeBytes);
		bytes = DiarkisPacket.Combine(bytes, fieldSizeBytes);

		/* int */
		byte[] nodeCountBytes = BitConverter.GetBytes((uint)NodeCount);
		Array.Reverse(nodeCountBytes);
		bytes = DiarkisPacket.Combine(bytes, nodeCountBytes);

		// done
		return bytes;
	}

	public bool Unpack(byte[] bytes)
	{
		if (bytes.Length < 20)
		{
			return false;
		}

		int offset = 0;

		/* long */
		byte[] fieldOfVisionSizeBytes = Diarkis.DiarkisPacket.Slice(bytes, offset, 8);
		Array.Reverse(fieldOfVisionSizeBytes);
		FieldOfVisionSize = (long)BitConverter.ToUInt64(fieldOfVisionSizeBytes);
		offset += 8;

		/* long */
		byte[] fieldSizeBytes = Diarkis.DiarkisPacket.Slice(bytes, offset, 8);
		Array.Reverse(fieldSizeBytes);
		FieldSize = (long)BitConverter.ToUInt64(fieldSizeBytes);
		offset += 8;

		/* int */
		byte[] nodeCountBytes = Diarkis.DiarkisPacket.Slice(bytes, offset, 4);
		Array.Reverse(nodeCountBytes);
		NodeCount = (int)BitConverter.ToUInt32(nodeCountBytes);
		offset += 4;


		return true;
	}

	public override string ToString()
	{
		List<string> list = new List<string>();
		list.Add(string.Format("FieldOfVisionSize = {0}", FieldOfVisionSize));
		list.Add(string.Format("FieldSize = {0}", FieldSize));
		list.Add(string.Format("NodeCount = {0}", NodeCount));
		return string.Join(" | ", list);
	}

}

}
