// Code generated by Diarkis Puffer module: DO NOT EDIT
//
// Generated by Diarkis Version 1.0.0
//
// - Maximum length of a string is 65535 bytes
// - Maximum length of a byte array is 65535 bytes
// - Maximum length of any array is 65535 elements
using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using Diarkis;

namespace Diarkis {

public class GetFieldInfo : DiarkisPufferObject
{
	public static byte VER {
		get => 2;
	}
	public static ushort CMD {
		get => 4001;
	}

	public long FieldOfVisionSize = 0;
	public long FieldSize = 0;
	public int NodeCount = 0;

	public override int GetRequiredBufferSize()
	{
		int len = 0;
		len += sizeof(long);
		len += sizeof(long);
		len += sizeof(int);
		return len;
	}

	public override int Serialize(ref byte[] buffer, int index)
	{
		int idx = index;
				/* long */
		idx += DiarkisSerialization.Serialize(FieldOfVisionSize, ref buffer, idx);

		/* long */
		idx += DiarkisSerialization.Serialize(FieldSize, ref buffer, idx);

		/* int */
		idx += DiarkisSerialization.Serialize(NodeCount, ref buffer, idx);

		return idx - index;
	}

	public void Pack(ref byte[] buffer)
	{
		this.Serialize(ref buffer, 0);
	}

	public byte[] Pack()
	{
		byte[] buffer = new byte[this.GetRequiredBufferSize()];
		this.Serialize(ref buffer, 0);
		// done
		return buffer;
	}

	public bool Unpack(Span<byte> bytes)
	{
		
		int offset = 0;

		/* long */
		Span<byte> fieldOfVisionSizeBytes = bytes.Slice(offset, 8);
		fieldOfVisionSizeBytes.Reverse();
		FieldOfVisionSize = MemoryMarshal.Cast<byte, long>(fieldOfVisionSizeBytes)[0];
		fieldOfVisionSizeBytes.Reverse();
		offset += 8;

		/* long */
		Span<byte> fieldSizeBytes = bytes.Slice(offset, 8);
		fieldSizeBytes.Reverse();
		FieldSize = MemoryMarshal.Cast<byte, long>(fieldSizeBytes)[0];
		fieldSizeBytes.Reverse();
		offset += 8;

		/* int */
		Span<byte> nodeCountBytes = bytes.Slice(offset, 4);
		NodeCount = (int)((nodeCountBytes[0] << 24) | (nodeCountBytes[1] << 16) | (nodeCountBytes[2] << 8) | nodeCountBytes[3]);
		offset += 4;


		return true;
	}

	public bool Unpack(byte[] bytes)
	{
		if (bytes.Length < 20)
		{
			return false;
		}
		return Unpack(new Span<byte>(bytes));
	}

	public override string ToString()
	{
		List<string> list = new List<string>();
		list.Add(string.Format("FieldOfVisionSize = {0}", FieldOfVisionSize));
		list.Add(string.Format("FieldSize = {0}", FieldSize));
		list.Add(string.Format("NodeCount = {0}", NodeCount));
		return string.Join(" | ", list);
	}
}

}
