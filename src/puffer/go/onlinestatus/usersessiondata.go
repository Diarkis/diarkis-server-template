// Â© 2019-2024 Diarkis Inc. All rights reserved.

// Code generated by Diarkis Puffer module: DO NOT EDIT.
//
// # Auto-generated by Diarkis Version 1.0.0
//
// - Maximum length of a string is 65535 bytes
// - Maximum length of a byte array is 65535 bytes
// - Maximum length of any array is 65535 elements
package onlinestatus

import "encoding/binary"
import "errors"
import "fmt"
import "strings"

// UserSessionDataVer represents the ver of the protocol's command.
//
//	[NOTE] The value is optional and if ver is not given in the definition JSON, it will be 0.
const UserSessionDataVer uint8 = 0

// UserSessionDataCmd represents the command ID of the protocol's command ID.
//
//	[NOTE] The value is optional and if cmd is not given in the definition JSON, it will be 0.
const UserSessionDataCmd uint16 = 0

// UserSessionData represents the command protocol data structure.
type UserSessionData struct {
	// Command version of the protocol
	Ver uint8
	// Command ID of the protocol
	Cmd  uint16
	ID   string
	Type uint8
}

// NewUserSessionData creates a new instance of UserSessionData struct.
func NewUserSessionData() *UserSessionData {
	return &UserSessionData{Ver: 0, Cmd: 0, ID: "", Type: 0}
}

// Pack encodes UserSessionData struct to a byte array to be delivered over the command.
func (proto *UserSessionData) Pack() []byte {
	bytes := make([]byte, 0)

	/* string */
	iDSizeBytes := make([]byte, 2)
	binary.BigEndian.PutUint16(iDSizeBytes, uint16(len(proto.ID)))
	bytes = append(bytes, iDSizeBytes...)
	bytes = append(bytes, []byte(proto.ID)...)

	/* uint8 */
	typeBytes := make([]byte, 1)
	typeBytes[0] = proto.Type
	bytes = append(bytes, typeBytes...)

	// done
	return bytes
}

// Unpack decodes the command payload byte array to UserSessionData struct.
func (proto *UserSessionData) Unpack(bytes []byte) error {
	if len(bytes) < 3 {
		return errors.New("UserSessionDataUnpackError")
	}

	offset := 0

	/* string */
	iDSize := int(binary.BigEndian.Uint16(bytes[offset : offset+2]))
	if iDSize+offset > len(bytes) {
		return errors.New("UnpackError")
	}
	offset += 2
	proto.ID = string(bytes[offset : offset+iDSize])
	offset += iDSize

	/* uint8 */
	proto.Type = uint8(bytes[offset])
	offset++

	return nil
}

func (proto *UserSessionData) String() string {
	list := make([]string, 0)
	list = append(list, fmt.Sprint("ID = ", proto.ID))
	list = append(list, fmt.Sprint("Type = ", proto.Type))
	return strings.Join(list, " | ")
}

func (proto *UserSessionData) GetVer() uint8 {
	return proto.Ver
}
func (proto *UserSessionData) GetCmd() uint16 {
	return proto.Cmd
}
