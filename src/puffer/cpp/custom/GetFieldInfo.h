// Code generated by Diarkis Puffer module: DO NOT EDIT
//
// Generated by Diarkis Version 1.0.0
//
// - Maximum length of a string is 65535 bytes
// - Maximum length of a byte array is 65535 bytes
// - Maximum length of any array is 65535 elements

#pragma once

#define MAX_ELEMENTS 65535

#include <stdint.h>
#include <sstream>
#include <algorithm>
#include <diarkis/common.h>
#include <Utils/BigEndian.h>

class GetFieldInfo
{
	public:
		const uint8_t ver = 2;
		const uint16_t cmd = 4001;

		int64_t fieldOfVisionSize = 0;
		int64_t fieldSize = 0;
		int32_t nodeCount = 0;

	bool Pack(uint8_t* _data, size_t _size, size_t& _packedBytes) const
	{
		size_t _requiredLen = Length();
		if (_requiredLen > _size || _requiredLen > MAX_ELEMENTS)
		{
			return false;
		}

		size_t _offset = 0;

		/* int64_t */
		PutUint64(_data + _offset, (uint64_t)fieldOfVisionSize);
		_offset += sizeof(int64_t);

		/* int64_t */
		PutUint64(_data + _offset, (uint64_t)fieldSize);
		_offset += sizeof(int64_t);

		/* int32_t */
		PutUint32(_data + _offset, (uint32_t)nodeCount);
		_offset += sizeof(int32_t);


		_packedBytes = _offset;
		return true;
	}

	bool Unpack(const uint8_t* _data, size_t _size, size_t& _unpackedBytes)
	{
		size_t _requiredLen = Length();
		if (_requiredLen > _size || _requiredLen > MAX_ELEMENTS)
		{
				return false;
		}

		size_t _offset = 0;
		_unpackedBytes = 0;

		/* int64_t */
		fieldOfVisionSize = (int64_t)GetUint64(_data + _offset);
		_offset += sizeof(int64_t);

		/* int64_t */
		fieldSize = (int64_t)GetUint64(_data + _offset);
		_offset += sizeof(int64_t);

		/* int32_t */
		nodeCount = (int32_t)GetUint32(_data + _offset);
		_offset += sizeof(int32_t);


		_unpackedBytes = _offset;
		return true;
	}

	size_t Length() const
	{
		size_t len = 0;
		len += sizeof(int64_t); // fieldOfVisionSize
		len += sizeof(int64_t); // fieldSize
		len += sizeof(int32_t); // nodeCount
		return len;
	}

	size_t AlignedLength(size_t _align) const
	{
		size_t _original = Length();
	
		// Align must be non-zero
		if (_align == 0)
		{
			return _original;
		}
	
		if (_original % _align)
		{
			_original += _align - (_original % _align);
		}
		return _original;
	}

	Diarkis::StdString ToString(int _indent = 0)
	{
		Diarkis::StdStringStream ss;
		Diarkis::StdString spaces = "";
		if (_indent)
		{
			spaces = Diarkis::StdString(_indent, ' ');
		}

		ss << spaces << "fieldOfVisionSize=" << std::to_string(fieldOfVisionSize) << "\n";

		ss << spaces << "fieldSize=" << std::to_string(fieldSize) << "\n";

		ss << spaces << "nodeCount=" << std::to_string(nodeCount) << "\n";

		return ss.str();
	}

};
