// © 2019-2024 Diarkis Inc. All rights reserved.

// Code generated by "./generator ./config"; DO NOT EDIT.
package packets

import (
	"encoding/binary"
	"github.com/Diarkis/diarkis/packet"
)

// Packet Format
//
//	 No.    | Name         | Type         | Size    |
//	--------|--------------|--------------|---------|
//	 0.     | size         | int          | 4 bytes |
//	 1.     | roomID       | string       |         |
//	        | ├ size       |              | 1 byte  |
//	        | └ payload    |              | N bytes |
//	--------|--------------|--------------|---------|
type CreateRoomRes struct {
	Size   uint32 `json:"size"`
	RoomID string `json:"roomID"`
}

func CreateCreateRoomRes(values *CreateRoomRes) []byte {
	var bytes []byte

	// Append size
	bytes0 := make([]byte, 8)
	binary.BigEndian.PutUint64(bytes0, uint64(values.Size))
	bytes = append(bytes, bytes0[4:]...)

	// Append roomID
	bytes1, _ := packet.StringListToBytesWithSize([]string{values.RoomID}, 1)
	bytes = append(bytes, bytes1...)

	return bytes
}
func ParseCreateRoomRes(payload []byte) *CreateRoomRes {
	var parsed CreateRoomRes

	// Parse size
	parsed.Size = binary.BigEndian.Uint32(payload[0:4])

	// Parse roomID
	bytes1 := make([]byte, 8)
	copy(bytes1[7:], payload[4:5])
	size1 := int(binary.BigEndian.Uint64(bytes1))
	parsed.RoomID = string(payload[5 : 5+size1])

	return &parsed
}
