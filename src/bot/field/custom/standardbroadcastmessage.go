// Â© 2019-2024 Diarkis Inc. All rights reserved.

// Code generated by Diarkis Puffer module: DO NOT EDIT.
//
// # Auto-generated by Diarkis Version 1.0.0
//
// - Maximum length of a string is 65535 bytes
// - Maximum length of a byte array is 65535 bytes
// - Maximum length of any array is 65535 elements
package custom

import "encoding/binary"
import "errors"
import "fmt"
import "strings"

// StandardBroadcastMessageVer represents the ver of the protocol's command.
//
//	[NOTE] The value is optional and if ver is not given in the definition JSON, it will be 0.
const StandardBroadcastMessageVer uint8 = 0

// StandardBroadcastMessageCmd represents the command ID of the protocol's command ID.
//
//	[NOTE] The value is optional and if cmd is not given in the definition JSON, it will be 0.
const StandardBroadcastMessageCmd uint16 = 0

// StandardBroadcastMessage represents the command protocol data structure.
type StandardBroadcastMessage struct {
	// Command version of the protocol
	Ver uint8
	// Command ID of the protocol
	Cmd     uint16
	ID      string
	Message string
}

// NewStandardBroadcastMessage creates a new instance of StandardBroadcastMessage struct.
func NewStandardBroadcastMessage() *StandardBroadcastMessage {
	return &StandardBroadcastMessage{Ver: 0, Cmd: 0, ID: "", Message: ""}
}

// Pack encodes StandardBroadcastMessage struct to a byte array to be delivered over the command.
func (proto *StandardBroadcastMessage) Pack() []byte {
	bytes := make([]byte, 0)

	/* string */
	iDSizeBytes := make([]byte, 2)
	binary.BigEndian.PutUint16(iDSizeBytes, uint16(len(proto.ID)))
	bytes = append(bytes, iDSizeBytes...)
	bytes = append(bytes, []byte(proto.ID)...)

	/* string */
	messageSizeBytes := make([]byte, 2)
	binary.BigEndian.PutUint16(messageSizeBytes, uint16(len(proto.Message)))
	bytes = append(bytes, messageSizeBytes...)
	bytes = append(bytes, []byte(proto.Message)...)

	// done
	return bytes
}

// Unpack decodes the command payload byte array to StandardBroadcastMessage struct.
func (proto *StandardBroadcastMessage) Unpack(bytes []byte) error {
	if len(bytes) < 4 {
		return errors.New("StandardBroadcastMessageUnpackError")
	}

	offset := 0

	/* string */
	iDSize := int(binary.BigEndian.Uint16(bytes[offset : offset+2]))
	if iDSize+offset > len(bytes) {
		return errors.New("UnpackError")
	}
	offset += 2
	proto.ID = string(bytes[offset : offset+iDSize])
	offset += iDSize

	/* string */
	messageSize := int(binary.BigEndian.Uint16(bytes[offset : offset+2]))
	if messageSize+offset > len(bytes) {
		return errors.New("UnpackError")
	}
	offset += 2
	proto.Message = string(bytes[offset : offset+messageSize])
	offset += messageSize

	return nil
}

func (proto *StandardBroadcastMessage) String() string {
	list := make([]string, 0)
	list = append(list, fmt.Sprint("ID = ", proto.ID))
	list = append(list, fmt.Sprint("Message = ", proto.Message))
	return strings.Join(list, " | ")
}

func (proto *StandardBroadcastMessage) GetVer() uint8 {
	return proto.Ver
}
func (proto *StandardBroadcastMessage) GetCmd() uint16 {
	return proto.Cmd
}
