// Code generated by Diarkis Puffer module: DO NOT EDIT.
//
// Auto-generated by Diarkis Version $(DIARKIS_VER)
//
// - Maximum length of a string is 65535 bytes
// - Maximum length of a byte array is 65535 bytes
// - Maximum length of any array is 65535 elements
package $(PACKAGE_NAME)

$(IMPORT_ENCODING_BINARY)
import "errors"
$(IMPORT_FMT)
$(IMPORT_MATH)
import "strings"
$(IMPORT_UTIL)
$(IMPORT_CUSTOM)


// $(PROTOCOL_NAME)Ver represents the ver of the protocol's command.
//
//  [NOTE] The value is optional and if ver is not given in the definition JSON, it will be 0.
const $(PROTOCOL_NAME)Ver uint8 = $(VER)

// $(PROTOCOL_NAME)Cmd represents the command ID of the protocol's command ID.
//
//  [NOTE] The value is optional and if cmd is not given in the definition JSON, it will be 0.
const $(PROTOCOL_NAME)Cmd uint16 = $(CMD)

// $(PROTOCOL_NAME) represents the command protocol data structure.
type $(PROTOCOL_NAME) struct {
  // Command version of the protocol
  Ver uint8
  // Command ID of the protocol
  Cmd uint16
$(PROPERTIES)
}

// New$(PROTOCOL_NAME) creates a new instance of $(PROTOCOL_NAME) struct.
func New$(PROTOCOL_NAME)() *$(PROTOCOL_NAME) {
  return &$(PROTOCOL_NAME){ Ver: $(VER), Cmd: $(CMD)$(PROPERTY_DEFAULT_VALUES) }
}

// Pack encodes $(PROTOCOL_NAME) struct to a byte array to be delivered over the command.
func (proto *$(PROTOCOL_NAME)) Pack() []byte {
  bytes := make([]byte, 0)

$(PACK_LOGIC)
  // done
  return bytes
}

// Unpack decodes the command payload byte array to $(PROTOCOL_NAME) struct.
func (proto *$(PROTOCOL_NAME)) Unpack(bytes []byte) error {
  if len(bytes) < $(MIN_BYTES_SIZE) {
    return errors.New("$(PROTOCOL_NAME)UnpackError")
  }
$(OFFSET_INIT)$(UNPACK_LOGIC)

  return nil
}

func (proto *$(PROTOCOL_NAME)) String() string {
  list := make([]string, 0)
$(DEBUG_LOGIC)
  return strings.Join(list, " | ")
}

func (proto *$(PROTOCOL_NAME)) GetVer() uint8 {
  return proto.Ver
}
func (proto *$(PROTOCOL_NAME)) GetCmd() uint16 {
  return proto.Cmd
}