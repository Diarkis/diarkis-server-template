// Code generated by Diarkis Puffer module: DO NOT EDIT
//
// Generated by Diarkis Version $(DIARKIS_VER)
//
// - Maximum length of a string is 65535 bytes
// - Maximum length of a byte array is 65535 bytes
// - Maximum length of any array is 65535 elements

#pragma once

#define MAX_ELEMENTS 65535

#include <stdint.h>
#include <sstream>
#include <algorithm>
#include <diarkis/common.h>
#include <Utils/BigEndian.h>
$(IMPORT_CUSTOM)

class $(PROTOCOL_NAME)
{
  public:
    const uint8_t ver = $(VER);
    const uint16_t cmd = $(CMD);

$(PROPERTIES)

  bool Pack(uint8_t* _data, size_t _size, size_t& _packedBytes) const
  {
    size_t _requiredLen = Length();
    if (_requiredLen > _size || _requiredLen > MAX_ELEMENTS)
    {
      return false;
    }

    size_t _offset = 0;

$(PACK_LOGIC)

    _packedBytes = _offset;
    return true;
  }

  bool Unpack(const uint8_t* _data, size_t _size, size_t& _unpackedBytes)
  {
    size_t _requiredLen = Length();
    if (_requiredLen > _size || _requiredLen > MAX_ELEMENTS)
    {
        return false;
    }

    size_t _offset = 0;
    _unpackedBytes = 0;

$(UNPACK_LOGIC)

    _unpackedBytes = _offset;
    return true;
  }

  size_t Length() const
  {
$(LENGTH_LOGIC)
  }

  size_t AlignedLength(size_t _align) const
  {
    size_t _original = Length();
  
    // Align must be non-zero
    if (_align == 0)
    {
      return _original;
    }
  
    if (_original % _align)
    {
      _original += _align - (_original % _align);
    }
    return _original;
  }

  Diarkis::StdString ToString(int _indent = 0)
  {
    Diarkis::StdStringStream ss;
    Diarkis::StdString spaces = "";
    if (_indent)
    {
      spaces = Diarkis::StdString(_indent, ' ');
    }

$(DEBUG_LOGIC)
    return ss.str();
  }

};
